#!/bin/bash
#
#______________________________________________________________________
#  This script tars/untars, in parallel, each timestep in the uda and inside of the checkpoints 
#  directory.
#
#  Usage:
#   pTarUda 
#            -np:            [int]       Number of processores used.
#            -allTimesteps:   [y/n]       Tar all timesteps in uda?  If "n" then a vi window will open allowing you to edit the timesteps
#            -create         blank       create new archives
#            -extract        blank       extract timestep archieves
#            -uda            [dir name]  uda name
#            -help:                      Display this option summary
#
#
#  It does not delete the original timestep directories. 
#
#______________________________________________________________________

#echo $argv
#
#------------------
# unalias commands
unalias -a rm
unalias -a cd

#______________________________________________________________________
# Parse input
show_help=0
if test $# -ne 7; then
  echo "Wrong number of arguments ($#)."
  show_help=1
fi

# command line arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
  -np|--np)
      shift
      nproc="$1"
      ;;
  -allTimesteps|--allTimesteps)
      shift
      allTimesteps=${1^^}     # upper case trick
    #  if test "$allTimesteps" != "Y" || "$allTimesteps" != "N" ; then
    #    show_help=1
    #  fi 
      ;;
  -uda|--uda)
      shift
      uda="$1"
      ;;
  -create|--create)
      createExtract="create"
      ;;
  -extract|--extract)
      createExtract="extract"
      ;;    
  -help|--help|-h)
      show_help=1
      ;;
   *)
      echo "$1: Unknown option, -help for help"
      exit 1
      ;;
   esac
   shift
done

# usage string - exit
if [ $show_help -ne 0 ]; then
  cat <<EOF
      It does not delete the original timestep directories. 

      Options:
          -np:            [int]       Number of processores used.
          -allTimesteps:   [y/n]      operate on all directories in uda?  If "n" then a vi window will open allowing you to edit the timesteps
          -create         blank       create new archives
          -extract        blank       extract timestep archieves
          -uda            [dir name]  uda name
          -help:                      Display this option summary
EOF
  exit 0
fi
#__________________________________

pTarfulldir=`readlink -f $0`
pTardir=`dirname $pTarfulldir`

if test `echo $uda | cut -c1` != "/"; then
  # Not absolute path... fix it.
  uda=`pwd`/$uda
fi

#__________________________________
#  Form the TAR command
which pigz >& /dev/null                      # is the parallel version of gzip installed?
rc=$?

if test $createExtract == "create"; then
  if test "$rc" = "0"; then
    TAR="tar  --use-compress-program 'pigz' -cBf"
  else
    TAR="tar --use-compress-program 'gzip' -cBf"
  fi
fi

which unpigz >& /dev/null                      # is the parallel version of gunzip installed?
rc=$?
if test $createExtract == "extract"; then
  if test "$rc" = "0"; then
    TAR="tar  --use-compress-program 'unpigz' -xf"
  else
    TAR="tar --use-compress-program 'gunzip' -xf"
  fi
fi

export TAR createExtract

export PTAR_FILES=/tmp/ptar_files_`basename $uda`_`whoami`

echo "_____________________________________"
echo "Inputs:"
echo "	# processors:          $nproc"
echo "	allDirectories:        $allTimesteps"
echo "	uda:                   $uda"
echo "	PTAR_FILES:            $PTAR_FILES"
echo "	pTardir:               $pTardir"
echo "	tar command:           $TAR"
echo "_____________________________________"
echo ""

#______________________________________________________________________
# Bulletproofing
echo "Bullet proof tests:"

validateTarredFilesDir()
{
  if test -d "$STAMP_DIR"; then
    echo ""
    echo "  WARNING: It appears that these directories were in the process of being tarred"
    echo "           but were interrupted.  The list of directories already tarred can"
    echo "           be found in the $STAMP_DIR/stamp directory."
    echo ""
    echo "  MORE WARNING: It is possible, though unlikely, that some of the directories listed"
    echo "                as tarred did not complete successfully."
    echo ""
    echo "  Do you wish to continue tarring the remaining directories? (y/n)"
    echo "     (If not, manually remove the following directory and run this script again:"
    echo "           $STAMP_DIR)"
    echo ""
    echo -n " Please answer y/n: "
    read answer
    echo ""
    if test "$answer" != "y"; then
      echo "Goodbye."
      echo ""
      exit 1
    fi
  else
    mkdir $STAMP_DIR
  fi
}

export STAMP_DIR=$uda/.tarred_files
validateTarredFilesDir

if test ! -d "$STAMP_DIR"; then
  # Didn't have permissions to make the directory... so place it in tmp
  echo ""
  echo "  WARNING: Was not able to create $STAMP_DIR directory (bad permissions?)."
  export STAMP_DIR=/tmp/.tarred_files_`basename $uda`_`whoami`
  echo "           Placing it in $STAMP_DIR instead."
  echo ""
  validateTarredFilesDir
fi

if test ! -d "$STAMP_DIR"; then
  echo ""
  echo "  ERROR: Did not have permissions to create $STAMP_DIR directory.  Goodbye."
  echo ""
fi

if test "$uda" == "."; then
  echo ""
  echo "  ERROR: You can't set the local dir to '.'"
  echo ""
  exit 1
fi

echo -n "  Testing: does the local folder ($uda) exist... "
if test ! -e $uda; then
  echo ""
  echo ""
  echo "  ERROR: Local directory '$uda' does not exist"
  echo ""
  exit 1
fi
echo "yes."

#__________________________________
#  hard wired for now
MAKE=make
OS="Linux"

echo "_____________________________________"

#______________________________________________________________________
# Now do the work
#______________________________________________________________________
# record some info for posterity

PTAR_RECORD=$uda/ptar_record

touch $PTAR_RECORD

if test ! -f $PTAR_RECORD; then
  # Can't write to that directory... just place it in tmp for now.
  PTAR_RECORD=/tmp/ptar_record_`whoami`
fi

echo "--------------------------------" >> $PTAR_RECORD
echo "Started on `date`."               >> $PTAR_RECORD
echo "Uda:  $uda"                  >> $PTAR_RECORD
echo ""                                 >> $PTAR_RECORD

cd $uda

#-------------------------------
# make a sorted list of potential files to tar
# let the user edit that file with vi
/bin/rm -f $PTAR_FILES

FIND=find

if test $createExtract == "create"; then
  $FIND .                -maxdepth 1 -type d  -exec basename {} \; | grep -v "\.\|t[0-9]\|checkpoints\|.tarred_files" >$PTAR_FILES
  $FIND ./t*             -maxdepth 0 -type d  -exec basename {} \; >>$PTAR_FILES
  $FIND ./checkpoints    -maxdepth 1 -type d  >>$PTAR_FILES
fi
if test $createExtract == "extract"; then
  $FIND .                -maxdepth 1 -name "*.gz" -exec basename {} \; | grep -v "\.\|t[0-9]\|checkpoints\|.tarred_files" >$PTAR_FILES
  $FIND ./t*             -maxdepth 0 -name "*.gz" -exec basename {} \; >>$PTAR_FILES
  $FIND ./checkpoints    -maxdepth 1 -name "*.gz" >>$PTAR_FILES
fi


#remove "./checkpoints" from PTAR_FILES
sed -i /".\/checkpoints$"/d $PTAR_FILES

#more $PTAR_FILES

if test "$allTimesteps" == "N"; then
  echo "Now starting an editor:  Remove the files you don't want transferred"

  if test ! $?EDITOR || test "$EDITOR" == ""; then
    echo
    echo WARNING: \$EDITOR is not defined... defaulting to 'vi'
    echo "And 'vi' sometimes doesn't work well..."
    export EDITOR=vi
  fi
  $EDITOR $PTAR_FILES
fi

chmod ug+rw $PTAR_FILES 
 
echo
echo -n "Starting at: " | tee -a $PTAR_RECORD
date | tee -a $PTAR_RECORD
echo | tee -a $PTAR_RECORD

/usr/bin/time -p $MAKE  -s -f $pTardir/pTarUda_driver_$OS -j $nproc | tee -a $PTAR_RECORD

echo | tee -a $PTAR_RECORD
echo -n "Ending at: " | tee -a $PTAR_RECORD
date |tee -a $PTAR_RECORD
echo

exit 0
